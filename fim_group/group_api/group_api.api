syntax = "v1"

type GroupCreateRequest {
	UserID     uint   `header:"User-ID"`
	Mode       int8   `json:"mode,optional"`
	Name       string `json:"name,optional"`
	IsSearch   bool   `json:"is_seatch,optional"`
	Size       int    `json:"size,optional"`
	UserIDList []uint `json:"user_id_list,optional"`
}

type GroupCreateResponse {}

type GroupInfoRequest {
	UserID uint `header:"User-ID"`
	ID     uint `path:"id"` //群id
}

type UserInfo {
	UserID   uint   `json:"user_id"`
	Avatar   string `json:"avatar"`
	Nickname string `json:"nickname"`
}

type GroupInfoResponse {
	GroupID           uint       `json:"group_id"` //群id
	Title             string     `json:"title"` //群名称
	Abstract          string     `json:"abstract"` //群简介
	Avatar            string     `json:"avatar"` //群头像
	Creator           UserInfo   `json:"creator"` //群主
	MemberCount       int        `json:"member_count"` //群聊用户总数
	MemberOnlineCount int        `json:"member_online_count"` //在线用户数量
	AdminList         []UserInfo `json:"admin_list"` //管理员列表
	Role              int8       `json:"role"` //角色
}

type VerificationQuestion {
	Problem1 *string `json:"problem1,optional" conf:"problem1"`
	Problem2 *string `json:"problem2,optional" conf:"problem2"`
	Problem3 *string `json:"problem3,optional" conf:"problem3"`
	Answer1  *string `json:"answer1,optional" conf:"answer1"`
	Answer2  *string `json:"answer2,optional" conf:"answer2"`
	Answer3  *string `json:"answer3,optional" conf:"answer3"`
}

type GroupUpdateRequest {
	UserID               uint                  `header:"User-ID"`
	ID                   uint                  `json:"id"` //群id
	IsSearch             *bool                 `json:"is_search,optional" conf:"is_search"`
	Avatar               *string               `json:"avatar,optional" conf:"avatar"`
	Abstract             *string               `json:"abstract,optional" conf:"abstract"`
	Title                *string               `json:"title,optional" conf:"title"`
	Verification         *int8                 `json:"verification,optional" conf:"verification"`
	IsInvite             *bool                 `json:"is_invite,optional" conf:"is_invite"`
	IsTemporarySession   *bool                 `json:"is_temporary_session,optional" conf:"is_temporary_session"`
	IsProhibition        *bool                 `json:"is_prohibition,optional" conf:"is_prohibition"`
	VerificationQuestion *VerificationQuestion `json:"verification_question,optional" conf:"verification_question"`
}

type GroupUpdateResponse {}

type GroupDeleteRequest {
	UserID uint `header:"User-ID"`
	ID     uint `path:"id"` //群id
}

type GroupDeleteResponse {}

type GroupMemberRequest {
	UserID uint   `header:"User-ID"`
	ID     uint   `form:"id"`
	Page   int    `form:"page,optional"`
	Limit  int    `form:"limit,optional"`
	Sort   string `form:"sort,optional"`
}

type GroupMemberInfo {
	UserID         uint   `json:"user_id"`
	UserNickname   string `json:"user_nickname"`
	Avatar         string `json:"avatar"`
	IsOnline       bool   `json:"is_online"`
	Role           int8   `json:"role"`
	MemberNickname string `json:"member_nickname"`
	CreatedAt      string `json:"created_at"`
	NewMsgDate     string `json:"new_msg_date"`
}

type GroupMemberResponse {
	List  []GroupMemberInfo `json:"list"`
	Count int               `json:"count"`
}

service group {
	@handler group_create
	post /api/group/group_create (GroupCreateRequest) returns (GroupCreateResponse)

	@handler group_info
	get /api/group/group_info/:id (GroupInfoRequest) returns (GroupInfoResponse)

	@handler group_update
	put /api/group/group_update (GroupUpdateRequest) returns (GroupUpdateResponse)

	@handler group_delete
	delete /api/group/group_delete/:id (GroupDeleteRequest) returns (GroupDeleteResponse)

	@handler group_member
	get /api/group/group_member (GroupMemberRequest) returns (GroupMemberResponse)
}

//goctl api go -api group_api.api -dir .
